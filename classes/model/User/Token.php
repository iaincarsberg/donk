<?php

/**
 * Model_User_Token
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Model_User_Token extends Model_BaseUser_Token
{
	/**
	 * As we are using construct() to trigger the deletion of tokens we need to
	 * only trigger the delete_expired() function on the initial request, 
	 * otherwise you get an infinite recursive loop, as each token that is
	 * loaded in the collection triggers the construct() function.
	 * @var boolean
	 **/
	private static $delete_instantiator_oid = FALSE;
	
	/**
	 * Executes on token __construct()
	 * @param void
	 * @return void
	 */
	public function construct()
	{
		if (defined('DONK_BUILDING_DATABASES') AND DONK_BUILDING_DATABASES) {
			return;
		}
		
		if (mt_rand(1, 100) === 1 AND ! self::$delete_instantiator_oid) {
			// Do garbage collection
			$this->delete_expired();
		}

		if ($this->expires < time()) {
			// This object has expired
			$this->delete();
		}
	}
	
	/**
	 * Used to set the created timestamp
	 * @param void
	 * @return void
	 */
	public function preInsert($event)
	{
		$this->created = time();
	}
	
	/**
	 * Before a token is inserted we need to generate a 'token' for it :P
	 * @param void
	 * @return void
	 */
	public function preSave($event)
	{
		$this->token = $this->create_token();
	}
	
	/**
	 * Used to create a token for the token object.
	 * @param void
	 * @return string Containing a token
	 */
	protected function create_token()
	{
		do {
			$token = sha1(uniqid(Text::random('alnum', 32), TRUE));
			
		} while(Doctrine::getTable(get_class($this))->findOneByToken($token));
		
		return $token;
	}
	
	/**
	 * Deletes all expired tokens.
	 * @param void
	 * @return $this To allow object chaining
	 */
	public function delete_expired()
	{
		self::$delete_instantiator_oid = $this->_oid;
		Doctrine_Query::create()
			->delete('t')
			->from('Model_User_Token t')
			->where('t.expires<?', time())
			->execute();
		self::$delete_instantiator_oid = FALSE;
		return $this;
	}
}